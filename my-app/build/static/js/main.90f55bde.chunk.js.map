{"version":3,"sources":["App.jsx","serviceWorkerRegistration.js","reportWebVitals.js","index.js"],"names":["App","APIkey","inputRef","useRef","useState","condition","setCondition","error","setError","data","setData","icon","setIcon","a","console","log","current","value","city","url","fetch","response","json","rdata","hasOwnProperty","airQuality","air_quality","pm10","toFixed","className","for","name","class","id","ref","onClick","run","location","country","temp_c","message","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.90f55bde.chunk.js","sourcesContent":["import React, { useRef, useState } from \"react\";\n\nfunction App() {\n  const APIkey = \"31af3ad47b414743a46100602211504\";\n  let inputRef = useRef();\n  let [condition, setCondition] = useState(false);\n  let [error, setError] = useState(false);\n  let [data, setData] = useState({});\n  let [icon, setIcon] = useState(\"\");\n  async function run() {\n    setError(false);\n    setCondition(false);\n    console.log(inputRef.current.value)\n    let city = inputRef.current.value;\n    let url =\n      \"http://api.weatherapi.com/v1/current.json?key=\" +\n      APIkey +\n      \"&q=\" +\n      city +\n      \"&aqi=yes\";\n    let response = await fetch(url);\n    let rdata = await response.json();\n    setData(rdata);\n    if (rdata.hasOwnProperty(\"error\")) {\n      setError(true);\n    } else {\n      let airQuality = rdata.current.air_quality.pm10.toFixed(2);\n      if (airQuality <= 50) setIcon(\"😁\");\n      else if (airQuality <= 100) setIcon(\"😊\");\n      else if (airQuality <= 150) setIcon(\"😐\");\n      else if (airQuality <= 200) setIcon(\"😷\");\n      else if (airQuality <= 300) setIcon(\"🤢\");\n      else setIcon(\"💀\");\n      setCondition(true);\n    }\n  }\n  return (\n    <div className=\"App\">\n      <h1>Weather and Pollution Info</h1>\n\n      <label for=\"location\" name=\"location\">\n        {\" \"}\n        Location:\n        <input\n          class=\"location\"\n          id=\"location\"\n          name=\"location\"\n          ref={inputRef}\n        />{\" \"}\n      </label>\n      <button onClick={() => run()}>Get Info</button>\n\n      {condition && (\n        <div class=\"info\">\n          <h1 class=\"cityName\">\n            {data.location.name + \",\" + data.location.country}\n          </h1>\n          <p class=\"temp\">{\"Temperature: \" + data.current.temp_c + \" °C\"}</p>\n          <p class=\"aqi\">\n            {\"Air Quality Index: \" +\n              data.current.air_quality.pm10.toFixed(2) +\n              \" \" +\n              icon}\n          </p>\n        </div>\n      )}\n      {error && (\n        <div class=\"info\">\n          <h1>{data.error.message}</h1>\n        </div>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const reportWebVitals = (onPerfEntry) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.register();\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}